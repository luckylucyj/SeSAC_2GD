// @import 'reset';
// //같은 위치에 있기 때문에 파일 경로 지정안해도 됨-am 11:24
// @import 'mixin';
// $boxShadow: 2px 2px 6px rgba(58,58,58,.8);
// $blue_btn: #2323cb;
// .div1{
//     width: 100%;
//     height: 50vh;
//     background-color: red;

//     &:hover{
//         font-weight: bold;
//         background-color: blue  ;
//     }

//     .div2{
//         width: 80%;
//         height: 50%;
//         background-color: orange;
//         box-shadow: inset $boxShadow;
//         .div3{
//             width: 80%;
//             height: 50%;
//             box-shadow: $boxShadow;
//             background-color: yellow;
//         }
//     }
//     .btn{
//         width: 180px;
//         height: 70px;
//         border-radius: 15px;
//         box-shadow: $boxShadow;
//         line-height: 70px;
//         color: #fff;
//         font-size: 23px;
//         letter-spacing: 3px;

//         &.orangered{
//             background-color: orangered;
//         }

//         &--opacity{
//             background-color: blue;
//             opacity: .5;
//         }

//         &--blue{
//             background-color: blue;
//         }
//     }
// }

// .container{
//     .box1{
//         @include square1;
//         background-color: #2323cb;
//     }
//     .circle{
//         @include circle($circleColor:blue, $circleOpacity:.8  )
//     }
//     .box2{
//         // @include square2(
//         // $squareBgColor:yellow,
//         // $squareFontSize:20px,
//         // $squareFontColor:blue);

//     }
//     .box2 {
//         // @include square2() > default값 정해져 있어서 오류나지 않음
//         @include square2(
//           $squareBgColor: yellow,
//           $squareFontSize: 20px,
//           $squareFontColor: blue
//         );
//     }
// }

@import "reset";
@import "mixin";
$boxShadow: 2px 2px 6px rgba(0, 0, 0, 0.5);
$blue_btn: #2323cb;
.div1 {
  width: 100%;
  height: 50vh;
  background-color: red;
  .div2 {
    width: 80%;
    height: 50%;
    background-color: orange;
    box-shadow: inset $boxShadow;
    .div3 {
      width: 80%;
      height: 50%;
      box-shadow: $boxShadow;
      background-color: yellow;
    }
  }

  .btn {
    width: 180px;
    height: 70px;
    border-radius: 15px;
    box-shadow: $boxShadow;
    line-height: 70px;
    color: #fff;
    text-align: center;
    font-size: 23px;
    letter-spacing: 3px;

    &.orangered {
      background-color: orangered;
    }

    &--opacity {
      background-color: $blue_btn;
      opacity: 0.5;
    }

    &--blue {
      background-color: $blue_btn;
    }

    &:hover {
      color: yellow;
      font-weight: 700;
    }
  }
}

.container {
  .box1 {
    @include square1;
    background-color: #2323cb;

    // &:nth-child(1){
    //     background-color: red;
    //     width: 100px;
    // }
    // &:nth-child(2){
    //     background-color: orange;
    //     width: 120px;
    // }
    // &:nth-child(3){
    //     background-color: yellow;
    //     width: 140px;
    // }

    @for $i from 1 to 4 {
      //to에 마지막 숫자 포함하지 않기 때문에 3이 아니라 4로 지정해야함-pm 12:43
      &:nth-child(#{$i}) {
        width: (80px + 20px * $i);
      }
    }
  }
  .circle {
    // circle mixin 에는 default값 설정되어 있지 않기 때문에
    // default값 전달하지 않으면 오류 발생
    // @include circle()

    @include circle($circleColor: blue, $circleOpacity: 0.8);
    // @include circle( blue, 0.8);
    $circleBgColors: (blue, dodgerblue, rgb(82, 169, 255));
    //javascript에서는 문자열 처리를 하는데 scss는 ()로 쌈-pm 12:46
    // of문은 인덱스로 바로 접근할 수 없고 scss로도 인덱스로 접근할 수 없어서 index라는 메소드를 사용함-pm 12:51
    @each $el in $circleBgColors {
      //index(array, array의 value) array의 value에 대한 index 반환
      $index: index($circleBgColors, $el);
      &:nth-of-type(#{$index}) {
        @include circle($circleColor: $el, $circleOpacity: 1 - 0.2 * $index);
        //index를 이용한 수식으로 작성함-pm 12:56
      }
      //$index로 선언한 후 : index($배열이름, 인덱스내용담긴거=$el)-pm 12:53
    }
  }
  .box2 {
    // @include square2() > default값 정해져 있어서 오류나지 않음
    // @include square2(
    //   $squareBgColor: yellow,
    //   $squareFontSize: 20px,
    //   $squareFontColor: blue
    // );
    @include square2(black, 16px, #fff);
    &:nth-of-type(4) {
      @include square2(yellow, 20px, navy);
    }
    &:nth-of-type(5) {
      @include square2(orangered, 30px, #000);
    }
  }
}

.img-test {
  width: 100px;
  height: 100px;
  border: 1px solid blue;
  &.src-img {
    background-image: url("../assets/img1.png");
  }
  &.public-img {
    // background-image: url('../../public/img1.png');
    // 위의 방식은 추천되지 않음-상대위치가 바뀔 수 있어서-pm 2:40
    background-image: url("/assets/img1.png");
  }
}

.practice {
  display: flex;
  justify-content: space-evenly;
  margin-bottom: 300px;
  div {
    width: 200px;
    height: 300px;
    background-color: dodgerblue;
    border-radius: 10%;
    box-shadow: $boxShadow;
    background-position: center;
    background-repeat: no-repeat;
    background-size: contain;

    @for $i from 1 to 5{
        &:nth-child(#{$i}){
            background-image: url('../assets/img#{$i}.png');
        }
    }
    // &:nth-child(1){
    //     background-image: url('../assets/img1.png');
    // }
    // &:nth-child(2){
    //     background-image: url('../assets/img2.png');
    // }
    // &:nth-child(3){
    //     background-image: url('../assets/img3.png');
    // }
    // &:nth-child(4){
    //     background-image: url('../assets/img4.png');
    // }
  }
}

@import 'use_scss1';